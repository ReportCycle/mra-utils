name: Tag After CI Success

on:
  workflow_run:
    workflows: ["Node.js CI"]
    types:
      - completed

jobs:
  tag:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - uses: actions/checkout@v4

      - name: Get the latest tag
        id: get_tag
        run: |
          # Fetch tags from the repository
          git fetch --tags
          
          # Check if any tags exist
          TAG_COUNT=$(git tag -l | wc -l)
          
          if [ "$TAG_COUNT" -eq 0 ]; then
            echo "No tags found, starting from v1.0.0"
            echo "v1.0.0" > latest_version
          else
            # Get the latest tag
            TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
            echo "Latest tag found: $TAG"
            echo "$TAG" > latest_version
          fi

      - name: Calculate new version
        id: calculate_version
        run: |
          # Read the latest tag
          LATEST_VERSION=$(cat latest_version)
          # Extract major, minor, and patch
          VERSION_REGEX="^v([0-9]+)\.([0-9]+)\.([0-9]+)$"
          if [[ $LATEST_VERSION =~ $VERSION_REGEX ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            # Increment the patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          else
            # Default to v1.0.0 if no valid version is found
            NEW_VERSION="v1.0.0"
          fi
          echo "New version will be $NEW_VERSION"
          echo "$NEW_VERSION" > new_version

      - name: Tag the commit
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.MY_PAT }}
          script: |
            const baseTagName = NEW_VERSION;
            let tagName = baseTagName;
            try {
              // Attempt to fetch the tag to see if it already exists
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tagName}`,
              });
              // If the tag exists, append a timestamp to make a unique tag
              const date = new Date();
              const timestamp = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
              tagName = `${baseTagName}.${timestamp}`;
              console.log(`Base tag exists, new tag will be ${tagName}`);
            } catch (error) {
              // If the tag does not exist, the original tagName will be used
              console.log(`Tag ${tagName} does not exist, proceeding to create it.`);
            }
      
            // Create the tag with either the base name or the unique timestamped name
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: context.sha,
            });
